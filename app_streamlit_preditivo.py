#!/usr/bin/env python3
"""
Interface Streamlit com An√°lise Preditiva Integrada
Baseado no simulador existente com funcionalidades avan√ßadas de recomenda√ß√£o
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from datetime import datetime, timedelta

# Importar m√≥dulos personalizados
try:
    from analise_preditiva import AnalisePreditiva
    from sistema_recomendacoes import SistemaRecomendacoes
    from lista_ativos import obter_sugestoes_por_categoria
except ImportError as e:
    st.error(
        f"Erro ao importar um m√≥dulo: '{e.name}'. Verifique se todos os arquivos .py "
        "(`analise_preditiva.py`, `sistema_recomendacoes.py`, `lista_ativos.py`) "
        "est√£o no mesmo diret√≥rio que este script."
    )
    st.stop()

# Dicion√°rio de categorias de ativos
CATEGORIAS_DE_ATIVOS = {
    "A√ß√µes Americanas": "acoes_americanas",
    "A√ß√µes Brasileiras": "acoes_brasileiras",
    "BDRs": "bdrs",
    "ETFs Brasileiros": "etfs_brasileiros",
    "ETFs Americanos": "etfs_americanos"
}
st.set_page_config(
    page_title="Simulador de Renda Vari√°vel com An√°lise Preditiva",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem; font-weight: bold; text-align: center; margin-bottom: 2rem;
        color: #1E88E5;
    }
    .metric-card {
        background-color: #f0f2f6; padding: 1rem; border-radius: 0.5rem;
        border-left: 5px solid #1E88E5; margin: 0.5rem 0;
    }
    .recommendation-box {
        padding: 1rem; border-radius: 0.5rem; font-weight: bold;
        text-align: center; font-size: 1.2rem; margin-bottom: 1rem;
    }
    .strong-buy { background-color: #d4edda; color: #155724; border-left: 5px solid #28a745; }
    .buy { background-color: #e2f0d9; color: #38761d; border-left: 5px solid #6aa84f; }
    .neutral { background-color: #f8f9fa; color: #495057; border-left: 5px solid #6c757d; }
    .sell { background-color: #f8d7da; color: #721c24; border-left: 5px solid #dc3545; }
    .strong-sell { background-color: #f1c2c6; color: #a94442; border-left: 5px solid #cc0000; }
</style>
""", unsafe_allow_html=True)


# --- FUN√á√ïES DE EXECU√á√ÉO ---

def executar_analise_preditiva(simbolo, periodo_analise):
    st.header(f"üîÆ An√°lise Preditiva: {simbolo}")
    if st.button("üìä Analisar Ativo", key="analise_basica", type="primary", use_container_width=True):
        with st.spinner(f"Executando an√°lise para {simbolo}..."):
            try:
                analisador = AnalisePreditiva()
                resultado = analisador.gerar_recomendacao(simbolo, periodo=periodo_analise)
                if resultado:
                    exibir_analise_preditiva(resultado)
                else:
                    st.error(f"‚ùå N√£o foi poss√≠vel analisar {simbolo}. Verifique se o s√≠mbolo est√° correto ou tente novamente.")
            except Exception as e:
                st.error(f"Ocorreu um erro inesperado durante a an√°lise: {e}")

def executar_recomendacoes_avancadas(simbolo, periodo_analise):
    st.header(f"üéØ Recomenda√ß√µes Avan√ßadas: {simbolo}")
    if st.button("üîç Gerar Recomenda√ß√£o Avan√ßada", key="analise_avancada", type="primary", use_container_width=True):
        with st.spinner(f"Gerando recomenda√ß√£o avan√ßada para {simbolo}..."):
            try:
                sistema = SistemaRecomendacoes()
                resultado = sistema.gerar_recomendacao_avancada(simbolo, periodo=periodo_analise)
                if resultado:
                    exibir_recomendacoes_avancadas(resultado)
                else:
                    st.error(f"‚ùå N√£o foi poss√≠vel gerar recomenda√ß√£o para {simbolo}. Verifique o s√≠mbolo.")
            except Exception as e:
                st.error(f"Ocorreu um erro inesperado durante a recomenda√ß√£o: {e}")

def executar_comparacao_ativos(tipo_ativo, periodo_analise):
    st.header("‚öñÔ∏è Compara√ß√£o de Ativos")
    ativos_sugeridos = ATIVOS_POPULARES.get(tipo_ativo, [])
    exemplo_ativos = ",".join(ativos_sugeridos[:3]) if ativos_sugeridos else "AAPL,GOOGL,MSFT"
    
    ativos_comparacao = st.text_area(
        "Digite os s√≠mbolos dos ativos separados por v√≠rgula:",
        value=exemplo_ativos,
        help="Exemplo: AAPL,GOOGL,MSFT ou PETR4.SA,VALE3.SA,ITUB4.SA"
    )
    
    if st.button("üìà Comparar Ativos", key="comparar", type="primary", use_container_width=True):
        simbolos = [s.strip().upper() for s in ativos_comparacao.split(",") if s.strip()]
        if len(simbolos) < 2:
            st.error("‚ùå Por favor, insira pelo menos 2 s√≠mbolos para compara√ß√£o.")
            return
        
        with st.spinner("Comparando ativos... Por favor, aguarde."):
            try:
                comparar_multiplos_ativos(simbolos, periodo_analise)
            except Exception as e:
                st.error(f"Ocorreu um erro inesperado durante a compara√ß√£o: {e}")

# --- FUN√á√ïES DE EXIBI√á√ÉO ---

def exibir_analise_preditiva(resultado):
    st.success("‚úÖ An√°lise preditiva conclu√≠da!")
    
    rec_map = {
        "COMPRA FORTE": "strong-buy", "COMPRA": "buy",
        "VENDA FORTE": "strong-sell", "VENDA": "sell", "NEUTRO": "neutral"
    }
    rec_class = rec_map.get(resultado['recomendacao'], "neutral")
    
    html_string = f"""<div class="recommendation-box {rec_class}">{resultado["recomendacao"]}</div>"""
    st.markdown(html_string, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    col1.metric("üí∞ Pre√ßo Atual", f"${resultado['preco_atual']:.2f}")
    col2.metric("üìä Score", f"{resultado['score_consolidado']:.3f}")
    col3.metric("üìà RSI", f"{resultado['rsi_atual']:.1f}")
    
    with st.expander("üéØ Pre√ßos-Alvo e An√°lise Detalhada"):
        st.metric("üéØ Pre√ßo Alvo (Alta)", f"${resultado['preco_alvo_alta']:.2f}")
        st.metric("üõë Pre√ßo Alvo (Baixa)", f"${resultado['preco_alvo_baixa']:.2f}")
        st.write(f"**Tend√™ncia RSI:** {resultado['analise_detalhada']['tendencia_rsi']}")
        st.write(f"**Posi√ß√£o Bollinger:** {resultado['analise_detalhada']['posicao_bb']}")
        st.write(f"**Momentum MACD:** {resultado['analise_detalhada']['momentum_macd']}")

    fig = AnalisePreditiva().criar_grafico_analise_completa(resultado)
    if fig:
        st.plotly_chart(fig, use_container_width=True)
        
        # <<< NOVO BLOCO DE EXPLICA√á√ÉO ADICIONADO AQUI >>>
        with st.expander("üìò Entenda os Indicadores do Gr√°fico"):
            st.markdown("""
            - **Pre√ßo:** A linha principal que mostra a cota√ß√£o do ativo ao longo do tempo.
            - **BB Superior / Inferior (Bandas de Bollinger):** Criam um canal de volatilidade. Pre√ßo perto da banda superior pode indicar sobrecompra (poss√≠vel venda); perto da inferior, sobrevenda (poss√≠vel compra).
            - **M√©dia M√≥vel:** Suaviza o pre√ßo para mostrar a tend√™ncia principal. Se o pre√ßo est√° acima dela, a tend√™ncia √© de alta, e vice-versa.
            - **RSI (√çndice de For√ßa Relativa):** Mede a for√ßa do movimento. Acima de 70 √© considerado sobrecomprado; abaixo de 30, sobrevendido.
            - **MACD e Sinal:** Indicador de tend√™ncia. Quando a linha MACD (mais r√°pida) cruza para cima da linha de Sinal (mais lenta), √© um sinal de compra. O inverso √© um sinal de venda.
            - **Histograma:** Representa a diferen√ßa entre o MACD e o Sinal. Barras grandes indicam que a tend√™ncia atual (alta ou baixa) est√° forte.
            - **Score Consolidado:** Uma m√©trica criada por este programa que combina todos os indicadores em uma √∫nica pontua√ß√£o para gerar a recomenda√ß√£o final.
            """)

def exibir_recomendacoes_avancadas(resultado):
    st.success("‚úÖ Recomenda√ß√£o avan√ßada gerada!")
    
    rec_map = {
        "COMPRA MUITO FORTE": "strong-buy", "COMPRA FORTE": "strong-buy", "COMPRA": "buy",
        "VENDA MUITO FORTE": "strong-sell", "VENDA FORTE": "strong-sell", "VENDA": "sell", "NEUTRO": "neutral"
    }
    rec_class = rec_map.get(resultado['recomendacao'], "neutral")

    html_string = f"""<div class="recommendation-box {rec_class}">{resultado["recomendacao"]}  
<small>Confian√ßa: {resultado["confianca"]}</small></div>"""
    st.markdown(html_string, unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("üí∞ Pre√ßo Atual", f"${resultado['preco_atual']:.2f}")
    col2.metric("üìä Score Final", f"{resultado['score_final']:.3f}")
    col3.metric("üéØ Alvo Principal", f"${resultado['preco_alvo_1']:.2f}")
    col4.metric("üõë Stop Loss", f"${resultado['stop_loss']:.2f}")
    
    if resultado['padroes_recentes']:
        st.subheader("üïØÔ∏è Padr√µes de Candlestick Recentes")
        st.info(f"Padr√µes identificados nos √∫ltimos 5 dias: **{', '.join(resultado['padroes_recentes'])}**")
    
    with st.expander("üî¨ An√°lise T√©cnica Detalhada"):
        analise = resultado['analise_detalhada']
        st.write(f"**RSI:** {analise['tendencia_rsi']}")
        st.write(f"**Bollinger Bands:** {analise['posicao_bb']}")
        st.write(f"**MACD:** {analise['momentum_macd']}")
        st.write(f"**For√ßa da Tend√™ncia:** {analise['forca_tendencia']}")
        st.write(f"**Volatilidade:** {analise['volatilidade']}")

    fig = SistemaRecomendacoes().criar_grafico_recomendacao(resultado)
    if fig:
        st.plotly_chart(fig, use_container_width=True)
        
        # <<< NOVO BLOCO DE EXPLICA√á√ÉO ADICIONADO AQUI >>>
        with st.expander("üìò Entenda os Indicadores do Gr√°fico"):
            st.markdown("""
            - **Gr√°fico de Candlestick:** Mostra os pre√ßos de abertura, m√°ximo, m√≠nimo e fechamento de cada dia.
            - **BB Superior / Inferior (Bandas de Bollinger):** Criam um canal de volatilidade. Pre√ßo perto da banda superior pode indicar sobrecompra (poss√≠vel venda); perto da inferior, sobrevenda (poss√≠vel compra).
            - **M√©dia M√≥vel:** Suaviza o pre√ßo para mostrar a tend√™ncia principal. Se o pre√ßo est√° acima dela, a tend√™ncia √© de alta, e vice-versa.
            - **RSI (√çndice de For√ßa Relativa):** Mede a for√ßa do movimento. Acima de 70 √© considerado sobrecomprado; abaixo de 30, sobrevendido.
            - **MACD e Sinal:** Indicador de tend√™ncia. Quando a linha MACD (mais r√°pida) cruza para cima da linha de Sinal (mais lenta), √© um sinal de compra. O inverso √© um sinal de venda.
            - **Histograma:** Representa a diferen√ßa entre o MACD e o Sinal. Barras grandes indicam que a tend√™ncia atual (alta ou baixa) est√° forte.
            - **Score de Recomenda√ß√£o:** Uma m√©trica ponderada que combina m√∫ltiplos indicadores para gerar a recomenda√ß√£o final.
            - **Volume:** Mostra a quantidade de a√ß√µes negociadas. Um aumento no volume pode confirmar a for√ßa de uma tend√™ncia.
            """)

def comparar_multiplos_ativos(simbolos, periodo):
    analisador = AnalisePreditiva()
    resultados = []
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for i, simbolo in enumerate(simbolos):
        status_text.text(f"Analisando {i+1}/{len(simbolos)}: {simbolo}...")
        resultado = analisador.gerar_recomendacao(simbolo, periodo=periodo)
        if resultado:
            resultados.append({
                'S√≠mbolo': simbolo,
                'Pre√ßo Atual': resultado['preco_atual'],
                'Recomenda√ß√£o': resultado['recomendacao'],
                'Score': resultado['score_consolidado'],
                'RSI': resultado['rsi_atual']
            })
        progress_bar.progress((i + 1) / len(simbolos))
    
    status_text.success("Compara√ß√£o conclu√≠da!")
    
    if resultados:
        df_comparacao = pd.DataFrame(resultados)
        st.subheader("üìä Tabela Comparativa")
        st.dataframe(df_comparacao.style.format({
            'Pre√ßo Atual': '${:,.2f}',
            'Score': '{:.3f}',
            'RSI': '{:.1f}'
        }), use_container_width=True)
        
        st.subheader("‚öñÔ∏è Compara√ß√£o de Scores")
        fig_scores = go.Figure(data=[go.Bar(
            x=df_comparacao['S√≠mbolo'],
            y=df_comparacao['Score'],
            marker_color=['#28a745' if s > 0.1 else '#dc3545' if s < -0.1 else '#6c757d' for s in df_comparacao['Score']]
        )])
        fig_scores.update_layout(title="Compara√ß√£o dos Scores de Recomenda√ß√£o", template="plotly_white")
        st.plotly_chart(fig_scores, use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è Nenhum resultado encontrado para os ativos informados.")

# --- FUN√á√ÉO PRINCIPAL (MAIN) ---

def main():
    st.markdown('<h1 class="main-header">Simulador de Renda Vari√°vel Preditiva</h1>', unsafe_allow_html=True)
    
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
    
    modo_operacao = st.sidebar.selectbox(
        "Modo de Opera√ß√£o",
        ["An√°lise Preditiva B√°sica", "Recomenda√ß√µes Avan√ßadas", "Compara√ß√£o de Ativos"]
    )
    
    st.sidebar.subheader("üìä Configura√ß√µes do Ativo")
    
    simbolo = ""
    tipo_ativo = ""

    if modo_operacao != "Compara√ß√£o de Ativos":
        tipo_ativo = st.sidebar.selectbox("Tipo de Ativo", list(CATEGORIAS_DE_ATIVOS.keys()), key="tipo_ativo_selectbox")
        simbolos_sugeridos = CATEGORIAS_DE_ATIVOS[tipo_ativo]
        simbolo_selecionado = st.sidebar.selectbox("S√≠mbolos Sugeridos", simbolos_sugeridos, key="simbolo_sugerido_selectbox")
        simbolo_manual = st.sidebar.text_input("Ou digite o s√≠mbolo manualmente:", value=simbolo_selecionado, key="simbolo_manual_text")
        simbolo = simbolo_manual.strip().upper() if simbolo_manual else simbolo_selecionado
    else:
        tipo_ativo = st.sidebar.selectbox("Selecione uma categoria para sugest√µes:", list(CATEGORIAS_DE_ATIVOS.keys()), key="tipo_ativo_comparacao_selectbox")

    periodo_analise = st.sidebar.selectbox(
        "Per√≠odo de An√°lise",
        ["1mo", "3mo", "6mo", "1y", "2y", "5y"],
        index=3, # Padr√£o para 1 ano
        key="periodo_analise_selectbox"
    )
    
    if modo_operacao == "An√°lise Preditiva B√°sica":
        if simbolo:
            executar_analise_preditiva(simbolo, periodo_analise)
    elif modo_operacao == "Recomenda√ß√µes Avan√ßadas":
        if simbolo:
            executar_recomendacoes_avancadas(simbolo, periodo_analise)
    elif modo_operacao == "Compara√ß√£o de Ativos":
        if tipo_ativo:
            executar_comparacao_ativos(nome_tipo_ativo, periodo_analise)

if __name__ == "__main__":
    main()
